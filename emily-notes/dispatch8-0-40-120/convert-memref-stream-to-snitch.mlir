builtin.module {
  riscv.assembly_section ".text" {
    riscv.directive ".globl" "dispatch8_0_40_120"
    riscv.directive ".p2align" "2"
    riscv_func.func @dispatch8_0_40_120(%arg0 : !riscv.reg<a0>, %arg1 : !riscv.reg<a1>, %arg2 : !riscv.reg<a2>) {
      %0 = riscv.mv %arg0 : (!riscv.reg<a0>) -> !riscv.reg
      %arg0_1 = builtin.unrealized_conversion_cast %0 : !riscv.reg to memref<1x120xf64>
      %1 = riscv.mv %arg1 : (!riscv.reg<a1>) -> !riscv.reg
      %arg1_1 = builtin.unrealized_conversion_cast %1 : !riscv.reg to memref<5x120xf64>
      %2 = riscv.mv %arg2 : (!riscv.reg<a2>) -> !riscv.reg
      %arg2_1 = builtin.unrealized_conversion_cast %2 : !riscv.reg to memref<1x5xf64>
      %arg0_2 = builtin.unrealized_conversion_cast %arg0_1 : memref<1x120xf64> to !riscv.reg
      %arg1_2 = builtin.unrealized_conversion_cast %arg1_1 : memref<5x120xf64> to !riscv.reg
      snitch_stream.streaming_region {
        patterns = [
          #snitch_stream.stride_pattern<ub = [120], strides = [8], repeat = 5>,
          #snitch_stream.stride_pattern<ub = [120, 5], strides = [8, 960]>
        ]
      } ins(%arg0_2, %arg1_2 : !riscv.reg, !riscv.reg) {
      ^0(%3 : !snitch.readable<!riscv.freg>, %4 : !snitch.readable<!riscv.freg>):
        %5 = builtin.unrealized_conversion_cast %3 : !snitch.readable<!riscv.freg> to !memref_stream.readable<f64>
        %6 = builtin.unrealized_conversion_cast %4 : !snitch.readable<!riscv.freg> to !memref_stream.readable<f64>
        %7 = riscv.li 0 : !riscv.reg
        %8 = builtin.unrealized_conversion_cast %7 : !riscv.reg to index
        %9 = riscv.li 1 : !riscv.reg
        %10 = builtin.unrealized_conversion_cast %9 : !riscv.reg to index
        %11 = riscv.li 2 : !riscv.reg
        %12 = builtin.unrealized_conversion_cast %11 : !riscv.reg to index
        %13 = riscv.li 3 : !riscv.reg
        %14 = builtin.unrealized_conversion_cast %13 : !riscv.reg to index
        %15 = riscv.li 4 : !riscv.reg
        %16 = builtin.unrealized_conversion_cast %15 : !riscv.reg to index
        %17 = riscv.li 120 : !riscv.reg
        %18 = builtin.unrealized_conversion_cast %17 : !riscv.reg to index
        %19 = riscv.li 0 : !riscv.reg
        %20 = builtin.unrealized_conversion_cast %19 : !riscv.reg to index
        %21 = riscv.li 1 : !riscv.reg
        %22 = builtin.unrealized_conversion_cast %21 : !riscv.reg to index
        %23 = riscv.li 5 : !riscv.reg
        %24 = builtin.unrealized_conversion_cast %23 : !riscv.reg to index
        %25 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %26 = builtin.unrealized_conversion_cast %24 : index to !riscv.reg
        %27 = riscv.mul %25, %26 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %28 = builtin.unrealized_conversion_cast %27 : !riscv.reg to index
        %29 = builtin.unrealized_conversion_cast %28 : index to !riscv.reg
        %30 = builtin.unrealized_conversion_cast %8 : index to !riscv.reg
        %31 = riscv.add %29, %30 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %32 = builtin.unrealized_conversion_cast %31 : !riscv.reg to index
        %arg2_2 = builtin.unrealized_conversion_cast %arg2_1 : memref<1x5xf64> to !riscv.reg
        %33 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %34 = builtin.unrealized_conversion_cast %32 : index to !riscv.reg
        %pointer_dim_stride = riscv.li 5 : !riscv.reg
        %pointer_dim_offset = riscv.mul %33, %pointer_dim_stride : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %pointer_offset = riscv.add %pointer_dim_offset, %34 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %bytes_per_element = riscv.li 8 : !riscv.reg
        %scaled_pointer_offset = riscv.mul %pointer_offset, %bytes_per_element {"comment" = "multiply by element size"} : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %offset_pointer = riscv.add %arg2_2, %scaled_pointer_offset : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %35 = riscv.fld %offset_pointer, 0 {"comment" = "load double from memref of shape (1, 5)"} : (!riscv.reg) -> !riscv.freg
        %36 = builtin.unrealized_conversion_cast %35 : !riscv.freg to f64
        %37 = riscv.li 5 : !riscv.reg
        %38 = builtin.unrealized_conversion_cast %37 : !riscv.reg to index
        %39 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %40 = builtin.unrealized_conversion_cast %38 : index to !riscv.reg
        %41 = riscv.mul %39, %40 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %42 = builtin.unrealized_conversion_cast %41 : !riscv.reg to index
        %43 = builtin.unrealized_conversion_cast %42 : index to !riscv.reg
        %44 = builtin.unrealized_conversion_cast %10 : index to !riscv.reg
        %45 = riscv.add %43, %44 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %46 = builtin.unrealized_conversion_cast %45 : !riscv.reg to index
        %arg2_3 = builtin.unrealized_conversion_cast %arg2_1 : memref<1x5xf64> to !riscv.reg
        %47 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %48 = builtin.unrealized_conversion_cast %46 : index to !riscv.reg
        %pointer_dim_stride_1 = riscv.li 5 : !riscv.reg
        %pointer_dim_offset_1 = riscv.mul %47, %pointer_dim_stride_1 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %pointer_offset_1 = riscv.add %pointer_dim_offset_1, %48 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %bytes_per_element_1 = riscv.li 8 : !riscv.reg
        %scaled_pointer_offset_1 = riscv.mul %pointer_offset_1, %bytes_per_element_1 {"comment" = "multiply by element size"} : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %offset_pointer_1 = riscv.add %arg2_3, %scaled_pointer_offset_1 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %49 = riscv.fld %offset_pointer_1, 0 {"comment" = "load double from memref of shape (1, 5)"} : (!riscv.reg) -> !riscv.freg
        %50 = builtin.unrealized_conversion_cast %49 : !riscv.freg to f64
        %51 = riscv.li 5 : !riscv.reg
        %52 = builtin.unrealized_conversion_cast %51 : !riscv.reg to index
        %53 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %54 = builtin.unrealized_conversion_cast %52 : index to !riscv.reg
        %55 = riscv.mul %53, %54 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %56 = builtin.unrealized_conversion_cast %55 : !riscv.reg to index
        %57 = builtin.unrealized_conversion_cast %56 : index to !riscv.reg
        %58 = builtin.unrealized_conversion_cast %12 : index to !riscv.reg
        %59 = riscv.add %57, %58 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %60 = builtin.unrealized_conversion_cast %59 : !riscv.reg to index
        %arg2_4 = builtin.unrealized_conversion_cast %arg2_1 : memref<1x5xf64> to !riscv.reg
        %61 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %62 = builtin.unrealized_conversion_cast %60 : index to !riscv.reg
        %pointer_dim_stride_2 = riscv.li 5 : !riscv.reg
        %pointer_dim_offset_2 = riscv.mul %61, %pointer_dim_stride_2 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %pointer_offset_2 = riscv.add %pointer_dim_offset_2, %62 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %bytes_per_element_2 = riscv.li 8 : !riscv.reg
        %scaled_pointer_offset_2 = riscv.mul %pointer_offset_2, %bytes_per_element_2 {"comment" = "multiply by element size"} : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %offset_pointer_2 = riscv.add %arg2_4, %scaled_pointer_offset_2 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %63 = riscv.fld %offset_pointer_2, 0 {"comment" = "load double from memref of shape (1, 5)"} : (!riscv.reg) -> !riscv.freg
        %64 = builtin.unrealized_conversion_cast %63 : !riscv.freg to f64
        %65 = riscv.li 5 : !riscv.reg
        %66 = builtin.unrealized_conversion_cast %65 : !riscv.reg to index
        %67 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %68 = builtin.unrealized_conversion_cast %66 : index to !riscv.reg
        %69 = riscv.mul %67, %68 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %70 = builtin.unrealized_conversion_cast %69 : !riscv.reg to index
        %71 = builtin.unrealized_conversion_cast %70 : index to !riscv.reg
        %72 = builtin.unrealized_conversion_cast %14 : index to !riscv.reg
        %73 = riscv.add %71, %72 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %74 = builtin.unrealized_conversion_cast %73 : !riscv.reg to index
        %arg2_5 = builtin.unrealized_conversion_cast %arg2_1 : memref<1x5xf64> to !riscv.reg
        %75 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %76 = builtin.unrealized_conversion_cast %74 : index to !riscv.reg
        %pointer_dim_stride_3 = riscv.li 5 : !riscv.reg
        %pointer_dim_offset_3 = riscv.mul %75, %pointer_dim_stride_3 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %pointer_offset_3 = riscv.add %pointer_dim_offset_3, %76 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %bytes_per_element_3 = riscv.li 8 : !riscv.reg
        %scaled_pointer_offset_3 = riscv.mul %pointer_offset_3, %bytes_per_element_3 {"comment" = "multiply by element size"} : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %offset_pointer_3 = riscv.add %arg2_5, %scaled_pointer_offset_3 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %77 = riscv.fld %offset_pointer_3, 0 {"comment" = "load double from memref of shape (1, 5)"} : (!riscv.reg) -> !riscv.freg
        %78 = builtin.unrealized_conversion_cast %77 : !riscv.freg to f64
        %79 = riscv.li 5 : !riscv.reg
        %80 = builtin.unrealized_conversion_cast %79 : !riscv.reg to index
        %81 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %82 = builtin.unrealized_conversion_cast %80 : index to !riscv.reg
        %83 = riscv.mul %81, %82 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %84 = builtin.unrealized_conversion_cast %83 : !riscv.reg to index
        %85 = builtin.unrealized_conversion_cast %84 : index to !riscv.reg
        %86 = builtin.unrealized_conversion_cast %16 : index to !riscv.reg
        %87 = riscv.add %85, %86 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %88 = builtin.unrealized_conversion_cast %87 : !riscv.reg to index
        %arg2_6 = builtin.unrealized_conversion_cast %arg2_1 : memref<1x5xf64> to !riscv.reg
        %89 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %90 = builtin.unrealized_conversion_cast %88 : index to !riscv.reg
        %pointer_dim_stride_4 = riscv.li 5 : !riscv.reg
        %pointer_dim_offset_4 = riscv.mul %89, %pointer_dim_stride_4 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %pointer_offset_4 = riscv.add %pointer_dim_offset_4, %90 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %bytes_per_element_4 = riscv.li 8 : !riscv.reg
        %scaled_pointer_offset_4 = riscv.mul %pointer_offset_4, %bytes_per_element_4 {"comment" = "multiply by element size"} : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %offset_pointer_4 = riscv.add %arg2_6, %scaled_pointer_offset_4 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %91 = riscv.fld %offset_pointer_4, 0 {"comment" = "load double from memref of shape (1, 5)"} : (!riscv.reg) -> !riscv.freg
        %92 = builtin.unrealized_conversion_cast %91 : !riscv.freg to f64
        %93 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %94 = builtin.unrealized_conversion_cast %18 : index to !riscv.reg
        %95 = builtin.unrealized_conversion_cast %22 : index to !riscv.reg
        %96 = builtin.unrealized_conversion_cast %36 : f64 to !riscv.freg
        %97 = builtin.unrealized_conversion_cast %50 : f64 to !riscv.freg
        %98 = builtin.unrealized_conversion_cast %64 : f64 to !riscv.freg
        %99 = builtin.unrealized_conversion_cast %78 : f64 to !riscv.freg
        %100 = builtin.unrealized_conversion_cast %92 : f64 to !riscv.freg
        %101 = riscv.fmv.d %96 : (!riscv.freg) -> !riscv.freg
        %102 = riscv.fmv.d %97 : (!riscv.freg) -> !riscv.freg
        %103 = riscv.fmv.d %98 : (!riscv.freg) -> !riscv.freg
        %104 = riscv.fmv.d %99 : (!riscv.freg) -> !riscv.freg
        %105 = riscv.fmv.d %100 : (!riscv.freg) -> !riscv.freg
        %106, %107, %108, %109, %110 = riscv_scf.for %111 : !riscv.reg  = %93 to %94 step %95 iter_args(%out = %101, %out_1 = %102, %out_2 = %103, %out_3 = %104, %out_4 = %105) -> (!riscv.freg, !riscv.freg, !riscv.freg, !riscv.freg, !riscv.freg) {
          %out_5 = builtin.unrealized_conversion_cast %out_4 : !riscv.freg to f64
          %out_6 = builtin.unrealized_conversion_cast %out_3 : !riscv.freg to f64
          %out_7 = builtin.unrealized_conversion_cast %out_2 : !riscv.freg to f64
          %out_8 = builtin.unrealized_conversion_cast %out_1 : !riscv.freg to f64
          %out_9 = builtin.unrealized_conversion_cast %out : !riscv.freg to f64
          %112 = builtin.unrealized_conversion_cast %111 : !riscv.reg to index
          %in = builtin.unrealized_conversion_cast %5 : !memref_stream.readable<f64> to !snitch.readable<!riscv.freg>
          %in_1 = riscv_snitch.read from %in : !riscv.freg
          %in_2 = builtin.unrealized_conversion_cast %in_1 : !riscv.freg to f64
          %in_3 = builtin.unrealized_conversion_cast %5 : !memref_stream.readable<f64> to !snitch.readable<!riscv.freg>
          %in_4 = riscv_snitch.read from %in_3 : !riscv.freg
          %in_5 = builtin.unrealized_conversion_cast %in_4 : !riscv.freg to f64
          %in_6 = builtin.unrealized_conversion_cast %5 : !memref_stream.readable<f64> to !snitch.readable<!riscv.freg>
          %in_7 = riscv_snitch.read from %in_6 : !riscv.freg
          %in_8 = builtin.unrealized_conversion_cast %in_7 : !riscv.freg to f64
          %in_9 = builtin.unrealized_conversion_cast %5 : !memref_stream.readable<f64> to !snitch.readable<!riscv.freg>
          %in_10 = riscv_snitch.read from %in_9 : !riscv.freg
          %in_11 = builtin.unrealized_conversion_cast %in_10 : !riscv.freg to f64
          %in_12 = builtin.unrealized_conversion_cast %5 : !memref_stream.readable<f64> to !snitch.readable<!riscv.freg>
          %in_13 = riscv_snitch.read from %in_12 : !riscv.freg
          %in_14 = builtin.unrealized_conversion_cast %in_13 : !riscv.freg to f64
          %in_15 = builtin.unrealized_conversion_cast %6 : !memref_stream.readable<f64> to !snitch.readable<!riscv.freg>
          %in_16 = riscv_snitch.read from %in_15 : !riscv.freg
          %in_17 = builtin.unrealized_conversion_cast %in_16 : !riscv.freg to f64
          %in_18 = builtin.unrealized_conversion_cast %6 : !memref_stream.readable<f64> to !snitch.readable<!riscv.freg>
          %in_19 = riscv_snitch.read from %in_18 : !riscv.freg
          %in_20 = builtin.unrealized_conversion_cast %in_19 : !riscv.freg to f64
          %in_21 = builtin.unrealized_conversion_cast %6 : !memref_stream.readable<f64> to !snitch.readable<!riscv.freg>
          %in_22 = riscv_snitch.read from %in_21 : !riscv.freg
          %in_23 = builtin.unrealized_conversion_cast %in_22 : !riscv.freg to f64
          %in_24 = builtin.unrealized_conversion_cast %6 : !memref_stream.readable<f64> to !snitch.readable<!riscv.freg>
          %in_25 = riscv_snitch.read from %in_24 : !riscv.freg
          %in_26 = builtin.unrealized_conversion_cast %in_25 : !riscv.freg to f64
          %in_27 = builtin.unrealized_conversion_cast %6 : !memref_stream.readable<f64> to !snitch.readable<!riscv.freg>
          %in_28 = riscv_snitch.read from %in_27 : !riscv.freg
          %in_29 = builtin.unrealized_conversion_cast %in_28 : !riscv.freg to f64
          %113 = builtin.unrealized_conversion_cast %in_2 : f64 to !riscv.freg
          %114 = builtin.unrealized_conversion_cast %in_17 : f64 to !riscv.freg
          %115 = riscv.fmul.d %113, %114 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
          %116 = builtin.unrealized_conversion_cast %115 : !riscv.freg to f64
          %117 = builtin.unrealized_conversion_cast %in_5 : f64 to !riscv.freg
          %118 = builtin.unrealized_conversion_cast %in_20 : f64 to !riscv.freg
          %119 = riscv.fmul.d %117, %118 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
          %120 = builtin.unrealized_conversion_cast %119 : !riscv.freg to f64
          %121 = builtin.unrealized_conversion_cast %in_8 : f64 to !riscv.freg
          %122 = builtin.unrealized_conversion_cast %in_23 : f64 to !riscv.freg
          %123 = riscv.fmul.d %121, %122 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
          %124 = builtin.unrealized_conversion_cast %123 : !riscv.freg to f64
          %125 = builtin.unrealized_conversion_cast %in_11 : f64 to !riscv.freg
          %126 = builtin.unrealized_conversion_cast %in_26 : f64 to !riscv.freg
          %127 = riscv.fmul.d %125, %126 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
          %128 = builtin.unrealized_conversion_cast %127 : !riscv.freg to f64
          %129 = builtin.unrealized_conversion_cast %in_14 : f64 to !riscv.freg
          %130 = builtin.unrealized_conversion_cast %in_29 : f64 to !riscv.freg
          %131 = riscv.fmul.d %129, %130 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
          %132 = builtin.unrealized_conversion_cast %131 : !riscv.freg to f64
          %133 = builtin.unrealized_conversion_cast %out_9 : f64 to !riscv.freg
          %134 = builtin.unrealized_conversion_cast %116 : f64 to !riscv.freg
          %135 = riscv.fadd.d %133, %134 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
          %136 = builtin.unrealized_conversion_cast %135 : !riscv.freg to f64
          %137 = builtin.unrealized_conversion_cast %out_8 : f64 to !riscv.freg
          %138 = builtin.unrealized_conversion_cast %120 : f64 to !riscv.freg
          %139 = riscv.fadd.d %137, %138 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
          %140 = builtin.unrealized_conversion_cast %139 : !riscv.freg to f64
          %141 = builtin.unrealized_conversion_cast %out_7 : f64 to !riscv.freg
          %142 = builtin.unrealized_conversion_cast %124 : f64 to !riscv.freg
          %143 = riscv.fadd.d %141, %142 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
          %144 = builtin.unrealized_conversion_cast %143 : !riscv.freg to f64
          %145 = builtin.unrealized_conversion_cast %out_6 : f64 to !riscv.freg
          %146 = builtin.unrealized_conversion_cast %128 : f64 to !riscv.freg
          %147 = riscv.fadd.d %145, %146 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
          %148 = builtin.unrealized_conversion_cast %147 : !riscv.freg to f64
          %149 = builtin.unrealized_conversion_cast %out_5 : f64 to !riscv.freg
          %150 = builtin.unrealized_conversion_cast %132 : f64 to !riscv.freg
          %151 = riscv.fadd.d %149, %150 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
          %152 = builtin.unrealized_conversion_cast %151 : !riscv.freg to f64
          %153 = builtin.unrealized_conversion_cast %136 : f64 to !riscv.freg
          %154 = builtin.unrealized_conversion_cast %140 : f64 to !riscv.freg
          %155 = builtin.unrealized_conversion_cast %144 : f64 to !riscv.freg
          %156 = builtin.unrealized_conversion_cast %148 : f64 to !riscv.freg
          %157 = builtin.unrealized_conversion_cast %152 : f64 to !riscv.freg
          riscv_scf.yield %153, %154, %155, %156, %157 : !riscv.freg, !riscv.freg, !riscv.freg, !riscv.freg, !riscv.freg
        }
        %158 = riscv.fmv.d %106 : (!riscv.freg) -> !riscv.freg
        %159 = riscv.fmv.d %107 : (!riscv.freg) -> !riscv.freg
        %160 = riscv.fmv.d %108 : (!riscv.freg) -> !riscv.freg
        %161 = riscv.fmv.d %109 : (!riscv.freg) -> !riscv.freg
        %162 = riscv.fmv.d %110 : (!riscv.freg) -> !riscv.freg
        %163 = builtin.unrealized_conversion_cast %158 : !riscv.freg to f64
        %164 = builtin.unrealized_conversion_cast %159 : !riscv.freg to f64
        %165 = builtin.unrealized_conversion_cast %160 : !riscv.freg to f64
        %166 = builtin.unrealized_conversion_cast %161 : !riscv.freg to f64
        %167 = builtin.unrealized_conversion_cast %162 : !riscv.freg to f64
        %168 = riscv.li 5 : !riscv.reg
        %169 = builtin.unrealized_conversion_cast %168 : !riscv.reg to index
        %170 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %171 = builtin.unrealized_conversion_cast %169 : index to !riscv.reg
        %172 = riscv.mul %170, %171 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %173 = builtin.unrealized_conversion_cast %172 : !riscv.reg to index
        %174 = builtin.unrealized_conversion_cast %173 : index to !riscv.reg
        %175 = builtin.unrealized_conversion_cast %8 : index to !riscv.reg
        %176 = riscv.add %174, %175 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %177 = builtin.unrealized_conversion_cast %176 : !riscv.reg to index
        %178 = builtin.unrealized_conversion_cast %163 : f64 to !riscv.freg
        %arg2_7 = builtin.unrealized_conversion_cast %arg2_1 : memref<1x5xf64> to !riscv.reg
        %179 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %180 = builtin.unrealized_conversion_cast %177 : index to !riscv.reg
        %pointer_dim_stride_5 = riscv.li 5 : !riscv.reg
        %pointer_dim_offset_5 = riscv.mul %179, %pointer_dim_stride_5 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %pointer_offset_5 = riscv.add %pointer_dim_offset_5, %180 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %bytes_per_element_5 = riscv.li 8 : !riscv.reg
        %scaled_pointer_offset_5 = riscv.mul %pointer_offset_5, %bytes_per_element_5 {"comment" = "multiply by element size"} : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %offset_pointer_5 = riscv.add %arg2_7, %scaled_pointer_offset_5 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        riscv.fsd %offset_pointer_5, %178, 0 {"comment" = "store double value to memref of shape (1, 5)"} : (!riscv.reg, !riscv.freg) -> ()
        %181 = riscv.li 5 : !riscv.reg
        %182 = builtin.unrealized_conversion_cast %181 : !riscv.reg to index
        %183 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %184 = builtin.unrealized_conversion_cast %182 : index to !riscv.reg
        %185 = riscv.mul %183, %184 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %186 = builtin.unrealized_conversion_cast %185 : !riscv.reg to index
        %187 = builtin.unrealized_conversion_cast %186 : index to !riscv.reg
        %188 = builtin.unrealized_conversion_cast %10 : index to !riscv.reg
        %189 = riscv.add %187, %188 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %190 = builtin.unrealized_conversion_cast %189 : !riscv.reg to index
        %191 = builtin.unrealized_conversion_cast %164 : f64 to !riscv.freg
        %arg2_8 = builtin.unrealized_conversion_cast %arg2_1 : memref<1x5xf64> to !riscv.reg
        %192 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %193 = builtin.unrealized_conversion_cast %190 : index to !riscv.reg
        %pointer_dim_stride_6 = riscv.li 5 : !riscv.reg
        %pointer_dim_offset_6 = riscv.mul %192, %pointer_dim_stride_6 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %pointer_offset_6 = riscv.add %pointer_dim_offset_6, %193 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %bytes_per_element_6 = riscv.li 8 : !riscv.reg
        %scaled_pointer_offset_6 = riscv.mul %pointer_offset_6, %bytes_per_element_6 {"comment" = "multiply by element size"} : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %offset_pointer_6 = riscv.add %arg2_8, %scaled_pointer_offset_6 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        riscv.fsd %offset_pointer_6, %191, 0 {"comment" = "store double value to memref of shape (1, 5)"} : (!riscv.reg, !riscv.freg) -> ()
        %194 = riscv.li 5 : !riscv.reg
        %195 = builtin.unrealized_conversion_cast %194 : !riscv.reg to index
        %196 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %197 = builtin.unrealized_conversion_cast %195 : index to !riscv.reg
        %198 = riscv.mul %196, %197 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %199 = builtin.unrealized_conversion_cast %198 : !riscv.reg to index
        %200 = builtin.unrealized_conversion_cast %199 : index to !riscv.reg
        %201 = builtin.unrealized_conversion_cast %12 : index to !riscv.reg
        %202 = riscv.add %200, %201 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %203 = builtin.unrealized_conversion_cast %202 : !riscv.reg to index
        %204 = builtin.unrealized_conversion_cast %165 : f64 to !riscv.freg
        %arg2_9 = builtin.unrealized_conversion_cast %arg2_1 : memref<1x5xf64> to !riscv.reg
        %205 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %206 = builtin.unrealized_conversion_cast %203 : index to !riscv.reg
        %pointer_dim_stride_7 = riscv.li 5 : !riscv.reg
        %pointer_dim_offset_7 = riscv.mul %205, %pointer_dim_stride_7 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %pointer_offset_7 = riscv.add %pointer_dim_offset_7, %206 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %bytes_per_element_7 = riscv.li 8 : !riscv.reg
        %scaled_pointer_offset_7 = riscv.mul %pointer_offset_7, %bytes_per_element_7 {"comment" = "multiply by element size"} : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %offset_pointer_7 = riscv.add %arg2_9, %scaled_pointer_offset_7 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        riscv.fsd %offset_pointer_7, %204, 0 {"comment" = "store double value to memref of shape (1, 5)"} : (!riscv.reg, !riscv.freg) -> ()
        %207 = riscv.li 5 : !riscv.reg
        %208 = builtin.unrealized_conversion_cast %207 : !riscv.reg to index
        %209 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %210 = builtin.unrealized_conversion_cast %208 : index to !riscv.reg
        %211 = riscv.mul %209, %210 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %212 = builtin.unrealized_conversion_cast %211 : !riscv.reg to index
        %213 = builtin.unrealized_conversion_cast %212 : index to !riscv.reg
        %214 = builtin.unrealized_conversion_cast %14 : index to !riscv.reg
        %215 = riscv.add %213, %214 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %216 = builtin.unrealized_conversion_cast %215 : !riscv.reg to index
        %217 = builtin.unrealized_conversion_cast %166 : f64 to !riscv.freg
        %arg2_10 = builtin.unrealized_conversion_cast %arg2_1 : memref<1x5xf64> to !riscv.reg
        %218 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %219 = builtin.unrealized_conversion_cast %216 : index to !riscv.reg
        %pointer_dim_stride_8 = riscv.li 5 : !riscv.reg
        %pointer_dim_offset_8 = riscv.mul %218, %pointer_dim_stride_8 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %pointer_offset_8 = riscv.add %pointer_dim_offset_8, %219 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %bytes_per_element_8 = riscv.li 8 : !riscv.reg
        %scaled_pointer_offset_8 = riscv.mul %pointer_offset_8, %bytes_per_element_8 {"comment" = "multiply by element size"} : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %offset_pointer_8 = riscv.add %arg2_10, %scaled_pointer_offset_8 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        riscv.fsd %offset_pointer_8, %217, 0 {"comment" = "store double value to memref of shape (1, 5)"} : (!riscv.reg, !riscv.freg) -> ()
        %220 = riscv.li 5 : !riscv.reg
        %221 = builtin.unrealized_conversion_cast %220 : !riscv.reg to index
        %222 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %223 = builtin.unrealized_conversion_cast %221 : index to !riscv.reg
        %224 = riscv.mul %222, %223 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %225 = builtin.unrealized_conversion_cast %224 : !riscv.reg to index
        %226 = builtin.unrealized_conversion_cast %225 : index to !riscv.reg
        %227 = builtin.unrealized_conversion_cast %16 : index to !riscv.reg
        %228 = riscv.add %226, %227 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %229 = builtin.unrealized_conversion_cast %228 : !riscv.reg to index
        %230 = builtin.unrealized_conversion_cast %167 : f64 to !riscv.freg
        %arg2_11 = builtin.unrealized_conversion_cast %arg2_1 : memref<1x5xf64> to !riscv.reg
        %231 = builtin.unrealized_conversion_cast %20 : index to !riscv.reg
        %232 = builtin.unrealized_conversion_cast %229 : index to !riscv.reg
        %pointer_dim_stride_9 = riscv.li 5 : !riscv.reg
        %pointer_dim_offset_9 = riscv.mul %231, %pointer_dim_stride_9 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %pointer_offset_9 = riscv.add %pointer_dim_offset_9, %232 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %bytes_per_element_9 = riscv.li 8 : !riscv.reg
        %scaled_pointer_offset_9 = riscv.mul %pointer_offset_9, %bytes_per_element_9 {"comment" = "multiply by element size"} : (!riscv.reg, !riscv.reg) -> !riscv.reg
        %offset_pointer_9 = riscv.add %arg2_11, %scaled_pointer_offset_9 : (!riscv.reg, !riscv.reg) -> !riscv.reg
        riscv.fsd %offset_pointer_9, %230, 0 {"comment" = "store double value to memref of shape (1, 5)"} : (!riscv.reg, !riscv.freg) -> ()
      }
      riscv_func.return
    }
  }
}
